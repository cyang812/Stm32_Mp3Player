<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32469I_DISCO\STM32469I_DISCO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32469I_DISCO\STM32469I_DISCO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Sep 14 22:33:11 2023
<BR><P>
<H3>Maximum Stack Usage =       4888 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Menu_prase &rArr; AUDIO_PLAYER_Process &rArr; AUDIO_PLAYER_Start &rArr; Lrc_Parse &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[244]">xmp3_MULSHIFT32</a>
 <LI><a href="#[1b3]">xmp3_FASTABS</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">ADC_IRQHandler</a><BR>
 <LI><a href="#[32]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">BusFault_Handler</a><BR>
 <LI><a href="#[35]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">DebugMon_Handler</a><BR>
 <LI><a href="#[30]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">HardFault_Handler</a><BR>
 <LI><a href="#[31]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">MemManage_Handler</a><BR>
 <LI><a href="#[2f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">NMI_Handler</a><BR>
 <LI><a href="#[36]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">PendSV_Handler</a><BR>
 <LI><a href="#[34]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">SVC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4a]">ADC_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[32]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[4c]">CAN1_RX0_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[4d]">CAN1_RX1_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[4e]">CAN1_SCE_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[4b]">CAN1_TX_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[78]">CAN2_RX0_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[79]">CAN2_RX1_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[7a]">CAN2_SCE_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[77]">CAN2_TX_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[86]">DCMI_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream0_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream1_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[46]">DMA1_Stream3_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[47]">DMA1_Stream4_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[48]">DMA1_Stream5_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[49]">DMA1_Stream6_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[67]">DMA1_Stream7_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[91]">DMA2D_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream0_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream2_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream4_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[7c]">DMA2_Stream5_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[7d]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[7e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[93]">DSI_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[35]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[75]">ETH_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[76]">ETH_WKUP_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[3e]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[60]">EXTI15_10_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[3f]">EXTI1_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[40]">EXTI2_IRQHandler</a> from stm32f4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[41]">EXTI3_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[42]">EXTI4_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[4f]">EXTI9_5_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[3c]">FLASH_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[68]">FMC_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[88]">FPU_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[87]">HASH_RNG_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[30]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[58]">I2C1_ER_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[57]">I2C1_EV_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[5a]">I2C2_ER_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[59]">I2C2_EV_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[81]">I2C3_ER_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[80]">I2C3_EV_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[9e]">Jpeg_CallbackFunction</a> from user_jpeg.o(i.Jpeg_CallbackFunction) referenced from user_jpeg.o(i.Show_MusicJPEG)
 <LI><a href="#[90]">LTDC_ER_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[8f]">LTDC_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[31]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[2f]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[7b]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[62]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[83]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[82]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[85]">OTG_HS_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[84]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[39]">PVD_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[36]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[92]">QUADSPI_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[3d]">RCC_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[61]">RTC_Alarm_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[3b]">RTC_WKUP_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[2e]">Reset_Handler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[8e]">SAI1_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[99]">SAI_DMAError</a> from stm32f4xx_hal_sai.o(i.SAI_DMAError) referenced from stm32f4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[98]">SAI_DMATxCplt</a> from stm32f4xx_hal_sai.o(i.SAI_DMATxCplt) referenced from stm32f4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[97]">SAI_DMATxHalfCplt</a> from stm32f4xx_hal_sai.o(i.SAI_DMATxHalfCplt) referenced from stm32f4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[69]">SDIO_IRQHandler</a> from stm32f4xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[9a]">SD_DMA_RxCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMA_RxCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[9b]">SD_DMA_RxError</a> from stm32f4xx_hal_sd.o(i.SD_DMA_RxError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[9c]">SD_DMA_TxCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMA_TxCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[9d]">SD_DMA_TxError</a> from stm32f4xx_hal_sd.o(i.SD_DMA_TxError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[103]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[107]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[105]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[104]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[106]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[5b]">SPI1_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[5c]">SPI2_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[6b]">SPI3_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[8b]">SPI4_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[8c]">SPI5_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[8d]">SPI6_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[9]">STORAGE_GetCapacity</a> from usbd_storage.o(i.STORAGE_GetCapacity) referenced 2 times from usbd_storage.o(.data)
 <LI><a href="#[e]">STORAGE_GetMaxLun</a> from usbd_storage.o(i.STORAGE_GetMaxLun) referenced 2 times from usbd_storage.o(.data)
 <LI><a href="#[8]">STORAGE_Init</a> from usbd_storage.o(i.STORAGE_Init) referenced 2 times from usbd_storage.o(.data)
 <LI><a href="#[a]">STORAGE_IsReady</a> from usbd_storage.o(i.STORAGE_IsReady) referenced 2 times from usbd_storage.o(.data)
 <LI><a href="#[b]">STORAGE_IsWriteProtected</a> from usbd_storage.o(i.STORAGE_IsWriteProtected) referenced 2 times from usbd_storage.o(.data)
 <LI><a href="#[c]">STORAGE_Read</a> from usbd_storage.o(i.STORAGE_Read) referenced 2 times from usbd_storage.o(.data)
 <LI><a href="#[d]">STORAGE_Write</a> from usbd_storage.o(i.STORAGE_Write) referenced 2 times from usbd_storage.o(.data)
 <LI><a href="#[34]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[37]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[95]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f469xx.o(.text)
 <LI><a href="#[3a]">TAMP_STAMP_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[50]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[53]">TIM1_CC_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[52]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[51]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[54]">TIM2_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[55]">TIM3_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[56]">TIM4_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[6a]">TIM5_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[6e]">TIM6_DAC_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[6f]">TIM7_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[63]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[66]">TIM8_CC_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[65]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[64]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[6c]">UART4_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[6d]">UART5_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[89]">UART7_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[8a]">UART8_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[5d]">USART1_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[5e]">USART2_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[5f]">USART3_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[7f]">USART6_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[6]">USBD_MSC_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[28]">USBD_MSC_DataIn</a> from usbd_msc.o(i.USBD_MSC_DataIn) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[29]">USBD_MSC_DataOut</a> from usbd_msc.o(i.USBD_MSC_DataOut) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[26]">USBD_MSC_DeInit</a> from usbd_msc.o(i.USBD_MSC_DeInit) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[1]">USBD_MSC_DeviceDescriptor</a> from usbd_desc.o(i.USBD_MSC_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2d]">USBD_MSC_GetDeviceQualifierDescriptor</a> from usbd_msc.o(i.USBD_MSC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[2b]">USBD_MSC_GetFSCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetFSCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[2a]">USBD_MSC_GetHSCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetHSCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[2c]">USBD_MSC_GetOtherSpeedCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[25]">USBD_MSC_Init</a> from usbd_msc.o(i.USBD_MSC_Init) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[7]">USBD_MSC_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2]">USBD_MSC_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[3]">USBD_MSC_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[4]">USBD_MSC_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[5]">USBD_MSC_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[27]">USBD_MSC_Setup</a> from usbd_msc.o(i.USBD_MSC_Setup) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[33]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[38]">WWDG_IRQHandler</a> from startup_stm32f469xx.o(.text) referenced from startup_stm32f469xx.o(RESET)
 <LI><a href="#[96]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f469xx.o(.text)
 <LI><a href="#[a0]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[ca]">access_virt_barray</a> from jmemmgr.o(i.access_virt_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[c9]">access_virt_sarray</a> from jmemmgr.o(i.access_virt_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[c5]">alloc_barray</a> from jmemmgr.o(i.alloc_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[c3]">alloc_large</a> from jmemmgr.o(i.alloc_large) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[c4]">alloc_sarray</a> from jmemmgr.o(i.alloc_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[c2]">alloc_small</a> from jmemmgr.o(i.alloc_small) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[ed]">color_quantize</a> from jquant1.o(i.color_quantize) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[ee]">color_quantize3</a> from jquant1.o(i.color_quantize3) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[a1]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.finish_input_pass)
 <LI><a href="#[a1]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[a1]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.reset_input_controller)
 <LI><a href="#[10]">cs43l22_DeInit</a> from cs43l22.o(i.cs43l22_DeInit) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[f]">cs43l22_Init</a> from cs43l22.o(i.cs43l22_Init) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[13]">cs43l22_Pause</a> from cs43l22.o(i.cs43l22_Pause) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[12]">cs43l22_Play</a> from cs43l22.o(i.cs43l22_Play) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[11]">cs43l22_ReadID</a> from cs43l22.o(i.cs43l22_ReadID) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[1a]">cs43l22_Reset</a> from cs43l22.o(i.cs43l22_Reset) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[14]">cs43l22_Resume</a> from cs43l22.o(i.cs43l22_Resume) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[16]">cs43l22_SetFrequency</a> from cs43l22.o(i.cs43l22_SetFrequency) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[18]">cs43l22_SetMute</a> from cs43l22.o(i.cs43l22_SetMute) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[19]">cs43l22_SetOutputMode</a> from cs43l22.o(i.cs43l22_SetOutputMode) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[17]">cs43l22_SetVolume</a> from cs43l22.o(i.cs43l22_SetVolume) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[15]">cs43l22_Stop</a> from cs43l22.o(i.cs43l22_Stop) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[e9]">decode_mcu</a> from jdarith.o(i.decode_mcu) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[ff]">decode_mcu</a> from jdhuff.o(i.decode_mcu) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[e7]">decode_mcu_AC_first</a> from jdarith.o(i.decode_mcu_AC_first) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[fc]">decode_mcu_AC_first</a> from jdhuff.o(i.decode_mcu_AC_first) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[e6]">decode_mcu_AC_refine</a> from jdarith.o(i.decode_mcu_AC_refine) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[fb]">decode_mcu_AC_refine</a> from jdhuff.o(i.decode_mcu_AC_refine) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[e8]">decode_mcu_DC_first</a> from jdarith.o(i.decode_mcu_DC_first) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[fd]">decode_mcu_DC_first</a> from jdhuff.o(i.decode_mcu_DC_first) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[e5]">decode_mcu_DC_refine</a> from jdarith.o(i.decode_mcu_DC_refine) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[fa]">decode_mcu_DC_refine</a> from jdhuff.o(i.decode_mcu_DC_refine) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[fe]">decode_mcu_sub</a> from jdhuff.o(i.decode_mcu_sub) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[b3]">decompress_onepass</a> from jdcoefct.o(i.decompress_onepass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[b2]">dummy_consume_data</a> from jdcoefct.o(i.dummy_consume_data) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[df]">emit_message</a> from jerror.o(i.emit_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[de]">error_exit</a> from jerror.o(i.error_exit) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[e4]">fill_input_buffer</a> from jdatasrc.o(i.fill_input_buffer) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[da]">fill_mem_input_buffer</a> from jdatasrc.o(i.fill_mem_input_buffer) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[b9]">finish_input_pass</a> from jdinput.o(i.finish_input_pass) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[c1]">finish_output_pass</a> from jdmaster.o(i.finish_output_pass) referenced from jdmaster.o(i.jinit_master_decompress)
 <LI><a href="#[f3]">finish_pass1</a> from jquant2.o(i.finish_pass1) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[f6]">finish_pass2</a> from jquant2.o(i.finish_pass2) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[a3]">finish_pass_1_quant</a> from jquant1.o(i.finish_pass_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[e1]">format_message</a> from jerror.o(i.format_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[9f]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[cb]">free_pool</a> from jmemmgr.o(i.free_pool) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[1b]">ft6x06_Init</a> from ft6x06.o(i.ft6x06_Init) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1c]">ft6x06_ReadID</a> from ft6x06.o(i.ft6x06_ReadID) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1d]">ft6x06_Reset</a> from ft6x06.o(i.ft6x06_Reset) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[22]">ft6x06_TS_ClearIT</a> from ft6x06.o(i.ft6x06_TS_ClearIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1f]">ft6x06_TS_DetectTouch</a> from ft6x06.o(i.ft6x06_TS_DetectTouch) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[24]">ft6x06_TS_DisableIT</a> from ft6x06.o(i.ft6x06_TS_DisableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[21]">ft6x06_TS_EnableIT</a> from ft6x06.o(i.ft6x06_TS_EnableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[20]">ft6x06_TS_GetXY</a> from ft6x06.o(i.ft6x06_TS_GetXY) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[23]">ft6x06_TS_ITStatus</a> from ft6x06.o(i.ft6x06_TS_ITStatus) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1e]">ft6x06_TS_Start</a> from ft6x06.o(i.ft6x06_TS_Start) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[d5]">fullsize_upsample</a> from jdsample.o(i.fullsize_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[bf]">get_interesting_appn</a> from jdmarker.o(i.get_interesting_appn) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[ac]">gray_rgb_convert</a> from jdcolor.o(i.gray_rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[aa]">grayscale_convert</a> from jdcolor.o(i.grayscale_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[cf]">h2v1_merged_upsample</a> from jdmerge.o(i.h2v1_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[d6]">h2v1_upsample</a> from jdsample.o(i.h2v1_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[d1]">h2v2_merged_upsample</a> from jdmerge.o(i.h2v2_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[d7]">h2v2_upsample</a> from jdsample.o(i.h2v2_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[d9]">init_mem_source</a> from jdatasrc.o(i.init_mem_source) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[e3]">init_source</a> from jdatasrc.o(i.init_source) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[d8]">int_upsample</a> from jdsample.o(i.int_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[ec]">jpeg_idct_float</a> from jidctflt.o(i.jpeg_idct_float) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[eb]">jpeg_idct_ifast</a> from jidctfst.o(i.jpeg_idct_ifast) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[ea]">jpeg_idct_islow</a> from jidctint.o(i.jpeg_idct_islow) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[dc]">jpeg_resync_to_restart</a> from jdmarker.o(i.jpeg_resync_to_restart) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[dc]">jpeg_resync_to_restart</a> from jdmarker.o(i.jpeg_resync_to_restart) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[94]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[ce]">merged_1v_upsample</a> from jdmerge.o(i.merged_1v_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[d0]">merged_2v_upsample</a> from jdmerge.o(i.merged_2v_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[a4]">new_color_map_1_quant</a> from jquant1.o(i.new_color_map_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[a6]">new_color_map_2_quant</a> from jquant2.o(i.new_color_map_2_quant) referenced from jquant2.o(i.jinit_2pass_quantizer)
 <LI><a href="#[d4]">noop_upsample</a> from jdsample.o(i.noop_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[a9]">null_convert</a> from jdcolor.o(i.null_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[e0]">output_message</a> from jerror.o(i.output_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[f5]">pass2_fs_dither</a> from jquant2.o(i.pass2_fs_dither) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[f4]">pass2_no_dither</a> from jquant2.o(i.pass2_no_dither) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[f7]">post_process_1pass</a> from jdpostct.o(i.post_process_1pass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[f9]">post_process_2pass</a> from jdpostct.o(i.post_process_2pass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[f8]">post_process_prepass</a> from jdpostct.o(i.post_process_prepass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[c0]">prepare_for_output_pass</a> from jdmaster.o(i.prepare_for_output_pass) referenced from jdmaster.o(i.jinit_master_decompress)
 <LI><a href="#[f2]">prescan_quantize</a> from jquant2.o(i.prescan_quantize) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[101]">process_data_context_main</a> from jdmainct.o(i.process_data_context_main) referenced from jdmainct.o(i.start_pass_main)
 <LI><a href="#[100]">process_data_crank_post</a> from jdmainct.o(i.process_data_crank_post) referenced from jdmainct.o(i.start_pass_main)
 <LI><a href="#[102]">process_data_simple_main</a> from jdmainct.o(i.process_data_simple_main) referenced from jdmainct.o(i.start_pass_main)
 <LI><a href="#[f0]">quantize3_ord_dither</a> from jquant1.o(i.quantize3_ord_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[f1]">quantize_fs_dither</a> from jquant1.o(i.quantize_fs_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[ef]">quantize_ord_dither</a> from jquant1.o(i.quantize_ord_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[bc]">read_markers</a> from jdmarker.o(i.read_markers) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[bd]">read_restart_marker</a> from jdmarker.o(i.read_restart_marker) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[c8]">realize_virt_arrays</a> from jmemmgr.o(i.realize_virt_arrays) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[c7]">request_virt_barray</a> from jmemmgr.o(i.request_virt_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[c6]">request_virt_sarray</a> from jmemmgr.o(i.request_virt_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[e2]">reset_error_mgr</a> from jerror.o(i.reset_error_mgr) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[b7]">reset_input_controller</a> from jdinput.o(i.reset_input_controller) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[bb]">reset_marker_reader</a> from jdmarker.o(i.reset_marker_reader) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[ad]">rgb_convert</a> from jdcolor.o(i.rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[ab]">rgb_gray_convert</a> from jdcolor.o(i.rgb_gray_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[cc]">self_destruct</a> from jmemmgr.o(i.self_destruct) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[d3]">sep_upsample</a> from jdsample.o(i.sep_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[db]">skip_input_data</a> from jdatasrc.o(i.skip_input_data) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[db]">skip_input_data</a> from jdatasrc.o(i.skip_input_data) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[be]">skip_variable</a> from jdmarker.o(i.skip_variable) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[b0]">start_input_pass</a> from jdcoefct.o(i.start_input_pass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[b8]">start_input_pass</a> from jdinput.o(i.start_input_pass) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[b1]">start_output_pass</a> from jdcoefct.o(i.start_output_pass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[a7]">start_pass</a> from jdarith.o(i.start_pass) referenced from jdarith.o(i.jinit_arith_decoder)
 <LI><a href="#[ba]">start_pass</a> from jddctmgr.o(i.start_pass) referenced from jddctmgr.o(i.jinit_inverse_dct)
 <LI><a href="#[a2]">start_pass_1_quant</a> from jquant1.o(i.start_pass_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[a5]">start_pass_2_quant</a> from jquant2.o(i.start_pass_2_quant) referenced from jquant2.o(i.jinit_2pass_quantizer)
 <LI><a href="#[a8]">start_pass_dcolor</a> from jdcolor.o(i.start_pass_dcolor) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[b5]">start_pass_dpost</a> from jdpostct.o(i.start_pass_dpost) referenced from jdpostct.o(i.jinit_d_post_controller)
 <LI><a href="#[b6]">start_pass_huff_decoder</a> from jdhuff.o(i.start_pass_huff_decoder) referenced from jdhuff.o(i.jinit_huff_decoder)
 <LI><a href="#[b4]">start_pass_main</a> from jdmainct.o(i.start_pass_main) referenced from jdmainct.o(i.jinit_d_main_controller)
 <LI><a href="#[cd]">start_pass_merged_upsample</a> from jdmerge.o(i.start_pass_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[d2]">start_pass_upsample</a> from jdsample.o(i.start_pass_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[dd]">term_source</a> from jdatasrc.o(i.term_source) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[dd]">term_source</a> from jdatasrc.o(i.term_source) referenced from jdatasrc.o(i.jpeg_stdio_src)
 <LI><a href="#[ae]">ycc_rgb_convert</a> from jdcolor.o(i.ycc_rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[af]">ycck_cmyk_convert</a> from jdcolor.o(i.ycck_cmyk_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(.text)
</UL>
<P><STRONG><a name="[317]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[108]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[318]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[319]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[31a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[31b]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[31c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[31d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>DSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f469xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[244]"></a>xmp3_MULSHIFT32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, asmmisc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IMDCT
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct12
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG2
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG1
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DequantChannel
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FDCT32
</UL>

<P><STRONG><a name="[1b3]"></a>xmp3_FASTABS</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, asmmisc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MidSideProc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG2
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG1
</UL>

<P><STRONG><a name="[313]"></a>xmp3_PolyphaseStereo</STRONG> (Thumb, 1308 bytes, Stack size 0 bytes, asmpoly_thumb2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Subband
</UL>

<P><STRONG><a name="[312]"></a>xmp3_PolyphaseMono</STRONG> (Thumb, 754 bytes, Stack size 0 bytes, asmpoly_thumb2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Subband
</UL>

<P><STRONG><a name="[25b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
</UL>

<P><STRONG><a name="[31e]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[304]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
</UL>

<P><STRONG><a name="[261]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
</UL>

<P><STRONG><a name="[31f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[321]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lrc_buff
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_inverse_dct
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_coef_controller
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_onepass
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_2_quant
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantize_ord_dither
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantize_fs_dither
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_sarray
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_barray
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_d_derived_tbl
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[323]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13c]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[256]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
</UL>

<P><STRONG><a name="[25a]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
</UL>

<P><STRONG><a name="[1b4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBK2Unicode
</UL>

<P><STRONG><a name="[1b8]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
</UL>

<P><STRONG><a name="[1a8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GetID3V2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
</UL>

<P><STRONG><a name="[258]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
</UL>

<P><STRONG><a name="[324]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[325]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[326]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[327]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[329]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[110]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2b7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[109]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[32a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>AUDIO_GetWavObjectNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_task.o(i.AUDIO_GetWavObjectNumber))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[2c1]"></a>AUDIO_IO_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32469i_discovery.o(i.AUDIO_IO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_DeInit
</UL>

<P><STRONG><a name="[11f]"></a>AUDIO_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32469i_discovery.o(i.AUDIO_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AUDIO_IO_Init &rArr; I2C2_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_ReadID
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Init
</UL>

<P><STRONG><a name="[121]"></a>AUDIO_IO_Read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32469i_discovery.o(i.AUDIO_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AUDIO_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_ReadID
</UL>

<P><STRONG><a name="[124]"></a>AUDIO_IO_Write</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32469i_discovery.o(i.AUDIO_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Stop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetVolume
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetOutputMode
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Resume
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Play
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Pause
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Init
</UL>

<P><STRONG><a name="[126]"></a>AUDIO_PLAYER_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_musicplayer.o(i.AUDIO_PLAYER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AUDIO_PLAYER_Init &rArr; BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>AUDIO_PLAYER_Process</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, user_musicplayer.o(i.AUDIO_PLAYER_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712 + Unknown Stack Size
<LI>Call Chain = AUDIO_PLAYER_Process &rArr; AUDIO_PLAYER_Start &rArr; Lrc_Parse &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetVolume
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Resume
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Pause
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayerStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicTimeRate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicName
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearZone
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_AcquireTouchButtons
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_PlayStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_filename
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_GetWavObjectNumber
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
</UL>

<P><STRONG><a name="[135]"></a>AUDIO_PLAYER_Start</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, user_musicplayer.o(i.AUDIO_PLAYER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688 + Unknown Stack Size
<LI>Call Chain = AUDIO_PLAYER_Start &rArr; Lrc_Parse &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetAudioFrameSlot
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayRTCTime
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayerStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicInfo
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lrc_buff
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MusicJPEG
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlaybackDisplayButtons
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMp3
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBK2Unicode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_GetWavObjectNumber
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[14e]"></a>AUDIO_ShowWavFiles</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, user_task.o(i.AUDIO_ShowWavFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AUDIO_ShowWavFiles &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
</UL>

<P><STRONG><a name="[14f]"></a>BSP_AUDIO_OUT_ClockConfig</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[221]"></a>BSP_AUDIO_OUT_Error_CallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_Error_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>

<P><STRONG><a name="[22a]"></a>BSP_AUDIO_OUT_HalfTransfer_CallBack</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, user_musicplayer.o(i.BSP_AUDIO_OUT_HalfTransfer_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
</UL>

<P><STRONG><a name="[127]"></a>BSP_AUDIO_OUT_Init</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_GetState
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Play_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[154]"></a>BSP_AUDIO_OUT_MspInit</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_AUDIO_OUT_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[137]"></a>BSP_AUDIO_OUT_Pause</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_Pause
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAPause
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[149]"></a>BSP_AUDIO_OUT_Play</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_AUDIO_OUT_Play &rArr; HAL_SAI_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Play_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[138]"></a>BSP_AUDIO_OUT_Resume</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAResume
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[148]"></a>BSP_AUDIO_OUT_SetAudioFrameSlot</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_SetAudioFrameSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_AUDIO_OUT_SetAudioFrameSlot &rArr; HAL_SAI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[139]"></a>BSP_AUDIO_OUT_SetVolume</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[12b]"></a>BSP_AUDIO_OUT_Stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32469i_discovery_audio.o(i.BSP_AUDIO_OUT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_AUDIO_OUT_Stop &rArr; HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[228]"></a>BSP_AUDIO_OUT_TransferComplete_CallBack</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, user_musicplayer.o(i.BSP_AUDIO_OUT_TransferComplete_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
</UL>

<P><STRONG><a name="[161]"></a>BSP_LCD_Clear</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_LCD_Clear &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayUSB
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
</UL>

<P><STRONG><a name="[166]"></a>BSP_LCD_ClearStringLine</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_ClearStringLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_ClearStringLine &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
</UL>

<P><STRONG><a name="[167]"></a>BSP_LCD_DisplayOn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_LCD_DisplayOn &rArr; HAL_DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[24f]"></a>BSP_LCD_DisplayStringAt</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_DisplayStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayUSB
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayerStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicTimeRate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicInfo
</UL>

<P><STRONG><a name="[169]"></a>BSP_LCD_DrawHLine</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_LCD_DrawHLine &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
</UL>

<P><STRONG><a name="[1b1]"></a>BSP_LCD_DrawLine</STRONG> (Thumb, 244 bytes, Stack size 44 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTriangle
</UL>

<P><STRONG><a name="[24c]"></a>BSP_LCD_DrawPixel</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_DrawPixel))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jpeg_CallbackFunction
</UL>

<P><STRONG><a name="[14c]"></a>BSP_LCD_DrawRect</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LCD_DrawRect &rArr; BSP_LCD_DrawVLine &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlaybackDisplayButtons
</UL>

<P><STRONG><a name="[16a]"></a>BSP_LCD_DrawVLine</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_LCD_DrawVLine &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
</UL>

<P><STRONG><a name="[14b]"></a>BSP_LCD_FillPolygon</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_LCD_FillPolygon &rArr; FillTriangle &rArr; BSP_LCD_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTriangle
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayButton
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlaybackDisplayButtons
</UL>

<P><STRONG><a name="[131]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_LCD_FillRect &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicTimeRate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicName
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearZone
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlaybackDisplayButtons
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[253]"></a>BSP_LCD_GetXSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[16c]"></a>BSP_LCD_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_LCD_Init &rArr; BSP_LCD_InitEx &rArr; BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[16d]"></a>BSP_LCD_InitEx</STRONG> (Thumb, 460 bytes, Stack size 96 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_LCD_InitEx &rArr; BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_DeInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigVideoMode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigPhyTimer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_StructInitFromVideoConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[178]"></a>BSP_LCD_LayerDefaultInit</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_LayerDefaultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[16e]"></a>BSP_LCD_MspInit</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSP_LCD_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[28d]"></a>BSP_LCD_SelectLayer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_SelectLayer))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[24e]"></a>BSP_LCD_SetBackColor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_SetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayUSB
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayerStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicTimeRate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicInfo
</UL>

<P><STRONG><a name="[14a]"></a>BSP_LCD_SetFont</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayUSB
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayerStatus
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlaybackDisplayButtons
</UL>

<P><STRONG><a name="[130]"></a>BSP_LCD_SetTextColor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32469i_discovery_lcd.o(i.BSP_LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayUSB
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayerStatus
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayButton
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicTimeRate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicName
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearZone
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlaybackDisplayButtons
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[17a]"></a>BSP_LED_Init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, stm32469i_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[17b]"></a>BSP_LED_Toggle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32469i_discovery.o(i.BSP_LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Error_Handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFat32FileSystem
</UL>

<P><STRONG><a name="[17d]"></a>BSP_QSPI_Init</STRONG> (Thumb, 288 bytes, Stack size 88 bytes, stm32469i_discovery_qspi.o(i.BSP_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BSP_QSPI_Init &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[17f]"></a>BSP_QSPI_MspInit</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32469i_discovery_qspi.o(i.BSP_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[186]"></a>BSP_QSPI_Read</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, stm32469i_discovery_qspi.o(i.BSP_QSPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_QSPI_Read &rArr; HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicName
</UL>

<P><STRONG><a name="[176]"></a>BSP_SDRAM_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32469i_discovery_sdram.o(i.BSP_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[189]"></a>BSP_SDRAM_Initialization_sequence</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32469i_discovery_sdram.o(i.BSP_SDRAM_Initialization_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_SDRAM_Initialization_sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[187]"></a>BSP_SDRAM_MspInit</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, stm32469i_discovery_sdram.o(i.BSP_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[18c]"></a>BSP_SD_DMA_Rx_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32469i_discovery_sd.o(i.BSP_SD_DMA_Rx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_SD_DMA_Rx_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>BSP_SD_DMA_Tx_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32469i_discovery_sd.o(i.BSP_SD_DMA_Tx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_SD_DMA_Tx_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>BSP_SD_Detect_MspInit</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32469i_discovery_sd.o(i.BSP_SD_Detect_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_SD_Detect_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[190]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32469i_discovery_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSP_SD_GetCardInfo &rArr; HAL_SD_Get_CardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Get_CardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_GetCapacity
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[192]"></a>BSP_SD_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32469i_discovery_sd.o(i.BSP_SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_SD_GetStatus &rArr; HAL_SD_GetStatus &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsReady
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
</UL>

<P><STRONG><a name="[194]"></a>BSP_SD_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32469i_discovery_sd.o(i.BSP_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_IRQHandler &rArr; HAL_SD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>BSP_SD_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32469i_discovery_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Detect_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsReady
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[19b]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32469i_discovery_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsReady
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_GetCapacity
</UL>

<P><STRONG><a name="[198]"></a>BSP_SD_MspInit</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, stm32469i_discovery_sd.o(i.BSP_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[19c]"></a>BSP_SD_ReadBlocks</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32469i_discovery_sd.o(i.BSP_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[19e]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32469i_discovery_sd.o(i.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckReadOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
</UL>

<P><STRONG><a name="[1a1]"></a>BSP_SD_WriteBlocks</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32469i_discovery_sd.o(i.BSP_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; SD_IsCardProgramming &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[1a3]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32469i_discovery_sd.o(i.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
</UL>

<P><STRONG><a name="[11e]"></a>BSP_TS_GetState</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, stm32469i_discovery_ts.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_AcquireTouchButtons
</UL>

<P><STRONG><a name="[28e]"></a>BSP_TS_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32469i_discovery_ts.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[32]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = BusFault_Handler &rArr;  BusFault_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[24b]"></a>ClearBuffer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, buffers.o(i.ClearBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMp3
</UL>

<P><STRONG><a name="[27d]"></a>Convert_Mono</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mp3_play.o(i.Convert_Mono))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
</UL>

<P><STRONG><a name="[45]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; BSP_SD_DMA_Rx_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_DMA_Rx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; BSP_SD_DMA_Tx_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_DMA_Tx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>DSI_IO_WriteCmd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32469i_discovery_lcd.o(i.DSI_IO_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DSI_IO_WriteCmd &rArr; HAL_DSI_LongWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[35]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = DebugMon_Handler &rArr;  DebugMon_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>Demo_Mp3Parsing</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, user_mp3player.o(i.Demo_Mp3Parsing))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = Demo_Mp3Parsing &rArr; Mp3_SubDecode &rArr; MP3Decode &rArr; xmp3_IMDCT &rArr; HybridTransform &rArr; imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[3e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>Error_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[1ad]"></a>FATFS_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user_task.o(i.FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATFS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1ae]"></a>FATFS_LinkDriver</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_Init
</UL>

<P><STRONG><a name="[22c]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[22e]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[1af]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[22d]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[141]"></a>GBK2Unicode</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, user_task.o(i.GBK2Unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GBK2Unicode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[250]"></a>GetFontAddress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, user_task.o(i.GetFontAddress))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicName
</UL>

<P><STRONG><a name="[1b6]"></a>Get_MusicCoverJpeg</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, user_jpeg.o(i.Get_MusicCoverJpeg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = Get_MusicCoverJpeg &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MusicJPEG
</UL>

<P><STRONG><a name="[24d]"></a>Get_MusicFilePos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_musicplayer.o(i.Get_MusicFilePos))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicInfo
</UL>

<P><STRONG><a name="[163]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[162]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[165]"></a>HAL_DMA2D_PollForTransfer</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_PollForTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_PollForTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[164]"></a>HAL_DMA2D_Start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_DMA_Abort</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxCplt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxCplt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>

<P><STRONG><a name="[159]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[18d]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_DMA_Tx_IRQHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_DMA_Rx_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>HAL_DMA_Init</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[225]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
</UL>

<P><STRONG><a name="[172]"></a>HAL_DSI_ConfigPhyTimer</STRONG> (Thumb, 148 bytes, Stack size 4 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_ConfigPhyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DSI_ConfigPhyTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[171]"></a>HAL_DSI_ConfigVideoMode</STRONG> (Thumb, 696 bytes, Stack size 4 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_ConfigVideoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DSI_ConfigVideoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[16f]"></a>HAL_DSI_DeInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[170]"></a>HAL_DSI_Init</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DSI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_DSI_LongWrite</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_LongWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DSI_LongWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_DSI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_DeInit
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_DSI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_DSI_ShortWrite</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_ShortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayOn
</UL>

<P><STRONG><a name="[175]"></a>HAL_DSI_Start</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dsi.o(i.HAL_DSI_Start))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[157]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Error_Handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFat32FileSystem
</UL>

<P><STRONG><a name="[1be]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_GPIO_Init</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Detect_MspInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[197]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Debug
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[156]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[123]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
</UL>

<P><STRONG><a name="[248]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_I2C_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 694 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
</UL>

<P><STRONG><a name="[125]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[28a]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[179]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_LayerDefaultInit
</UL>

<P><STRONG><a name="[174]"></a>HAL_LTDC_Init</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[173]"></a>HAL_LTDC_StructInitFromVideoConfig</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc_ex.o(i.HAL_LTDC_StructInitFromVideoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[15b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[201]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1da]"></a>HAL_PCD_EP_Flush</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_EP_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[1df]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1396 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_PCD_Init</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[207]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[20a]"></a>HAL_PCD_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[20e]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21a]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[20f]"></a>HAL_QSPI_Abort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>

<P><STRONG><a name="[211]"></a>HAL_QSPI_AutoPolling</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>

<P><STRONG><a name="[181]"></a>HAL_QSPI_Command</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>

<P><STRONG><a name="[17e]"></a>HAL_QSPI_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_QSPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[180]"></a>HAL_QSPI_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_QSPI_Init &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[213]"></a>HAL_QSPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
</UL>

<P><STRONG><a name="[214]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[185]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, stm32f4xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_QSPI_Transmit &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 242 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCCEx_GetPeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
</UL>

<P><STRONG><a name="[151]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1086 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[215]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[297]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[216]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 132 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[217]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 934 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[218]"></a>HAL_RTC_Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[219]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 100 bytes, Stack size 128 bytes, stm32f4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[21b]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Time
</UL>

<P><STRONG><a name="[21d]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Time
</UL>

<P><STRONG><a name="[15d]"></a>HAL_SAI_DMAPause</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_DMAPause))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Pause
</UL>

<P><STRONG><a name="[15f]"></a>HAL_SAI_DMAResume</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_DMAResume))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Resume
</UL>

<P><STRONG><a name="[160]"></a>HAL_SAI_DMAStop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
</UL>

<P><STRONG><a name="[152]"></a>HAL_SAI_DeInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SAI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[220]"></a>HAL_SAI_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32469i_discovery_audio.o(i.HAL_SAI_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Error_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAError
</UL>

<P><STRONG><a name="[153]"></a>HAL_SAI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[155]"></a>HAL_SAI_Init</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SAI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetInputClock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_BlockSynchroConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetAudioFrameSlot
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[21f]"></a>HAL_SAI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>

<P><STRONG><a name="[222]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_SAI_Transmit_DMA</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SAI_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
</UL>

<P><STRONG><a name="[227]"></a>HAL_SAI_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32469i_discovery_audio.o(i.HAL_SAI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxCplt
</UL>

<P><STRONG><a name="[229]"></a>HAL_SAI_TxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32469i_discovery_audio.o(i.HAL_SAI_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_HalfTransfer_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxHalfCplt
</UL>

<P><STRONG><a name="[188]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SDRAM_Init &rArr; FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[22b]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[18b]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[18a]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_SD_CheckReadOperation</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_CheckReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_SD_CheckReadOperation &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_SD_CheckWriteOperation</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_CheckWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SD_CheckWriteOperation &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[280]"></a>HAL_SD_DMA_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_DMA_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxCplt
</UL>

<P><STRONG><a name="[281]"></a>HAL_SD_DMA_RxErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_DMA_RxErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxError
</UL>

<P><STRONG><a name="[282]"></a>HAL_SD_DMA_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_DMA_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxCplt
</UL>

<P><STRONG><a name="[283]"></a>HAL_SD_DMA_TxErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_DMA_TxErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxError
</UL>

<P><STRONG><a name="[193]"></a>HAL_SD_GetStatus</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SD_GetStatus &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetStatus
</UL>

<P><STRONG><a name="[191]"></a>HAL_SD_Get_CardInfo</STRONG> (Thumb, 704 bytes, Stack size 28 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Get_CardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SD_Get_CardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[195]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_XferErrorCallback
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_XferCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>HAL_SD_Init</STRONG> (Thumb, 974 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_Get_CardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Get_CardInfo
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[234]"></a>HAL_SD_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 476 bytes, Stack size 104 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_SD_ReadBlocks &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[19f]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[19a]"></a>HAL_SD_WideBusOperation_Config</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WideBusOperation_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HAL_SD_WideBusOperation_Config &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 578 bytes, Stack size 104 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_SD_WriteBlocks &rArr; SD_IsCardProgramming &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 238 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[232]"></a>HAL_SD_XferCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_XferCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[233]"></a>HAL_SD_XferErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_XferErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[23e]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23f]"></a>HAL_UART_MspInit</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[241]"></a>HAL_UART_Transmit</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[30]"></a>HardFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = HardFault_Handler &rArr;  HardFault_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>InitMp3</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, user_mp3player.o(i.InitMp3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitMp3
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[12f]"></a>LCD_ClearZone</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, user_display.o(i.LCD_ClearZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_ClearZone &rArr; BSP_LCD_FillRect &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lrc_buff
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[147]"></a>LCD_DisplayMusicInfo</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, user_display.o(i.LCD_DisplayMusicInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_DisplayMusicInfo &rArr; BSP_LCD_DisplayStringAt
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicFilePos
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[129]"></a>LCD_DisplayMusicName</STRONG> (Thumb, 290 bytes, Stack size 184 bytes, user_display.o(i.LCD_DisplayMusicName))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = LCD_DisplayMusicName &rArr; LCD_DisplayStringAt &rArr; BSP_QSPI_Read &rArr; HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontAddress
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[12a]"></a>LCD_DisplayMusicTimeRate</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, user_display.o(i.LCD_DisplayMusicTimeRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LCD_DisplayMusicTimeRate &rArr; LCD_DisplayStringAt &rArr; BSP_QSPI_Read &rArr; HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[252]"></a>LCD_DisplayPlayButton</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, user_display.o(i.LCD_DisplayPlayButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_DisplayPlayButton &rArr; BSP_LCD_FillPolygon &rArr; FillTriangle &rArr; BSP_LCD_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillPolygon
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
</UL>

<P><STRONG><a name="[136]"></a>LCD_DisplayPlayerStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, user_display.o(i.LCD_DisplayPlayerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DisplayPlayerStatus &rArr; BSP_LCD_DisplayStringAt
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[13f]"></a>LCD_DisplayRTCTime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_display.o(i.LCD_DisplayRTCTime))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[14d]"></a>LCD_DisplayStringAt</STRONG> (Thumb, 240 bytes, Stack size 176 bytes, user_display.o(i.LCD_DisplayStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LCD_DisplayStringAt &rArr; BSP_QSPI_Read &rArr; HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Read
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontAddress
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicTimeRate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicName
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PlaybackDisplayButtons
</UL>

<P><STRONG><a name="[254]"></a>LCD_DisplayUSB</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, user_display.o(i.LCD_DisplayUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_DisplayUSB &rArr; BSP_LCD_DisplayStringAt
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorUSBOperation
</UL>

<P><STRONG><a name="[251]"></a>LCD_DrawChar</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, user_display.o(i.LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicName
</UL>

<P><STRONG><a name="[146]"></a>Lrc_Parse</STRONG> (Thumb, 804 bytes, Stack size 184 bytes, user_lrc.o(i.Lrc_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = Lrc_Parse &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[25d]"></a>MP3Decode</STRONG> (Thumb, 898 bytes, Stack size 64 bytes, mp3dec.o(i.MP3Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = MP3Decode &rArr; xmp3_IMDCT &rArr; HybridTransform &rArr; imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Subband
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IMDCT
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DecodeHuffman
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackSideInfo
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackFrameHeader
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_CheckPadBit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
</UL>

<P><STRONG><a name="[27b]"></a>MP3FindSyncWord</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, mp3dec.o(i.MP3FindSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MP3FindSyncWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
</UL>

<P><STRONG><a name="[27c]"></a>MP3GetLastFrameInfo</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, mp3dec.o(i.MP3GetLastFrameInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
</UL>

<P><STRONG><a name="[24a]"></a>MP3InitDecoder</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mp3dec.o(i.MP3InitDecoder))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_AllocateBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMp3
</UL>

<P><STRONG><a name="[268]"></a>MSC_BOT_CplClrFeature</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_CplClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_BOT_CplClrFeature &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[26c]"></a>MSC_BOT_DataIn</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbd_msc_bot.o(i.MSC_BOT_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataIn
</UL>

<P><STRONG><a name="[26e]"></a>MSC_BOT_DataOut</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, usbd_msc_bot.o(i.MSC_BOT_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MSC_BOT_DataOut &rArr; SCSI_ProcessCmd &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataOut
</UL>

<P><STRONG><a name="[2ac]"></a>MSC_BOT_DeInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[271]"></a>MSC_BOT_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_BOT_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[273]"></a>MSC_BOT_Reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSC_BOT_Reset &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[274]"></a>MSC_BOT_SendCSW</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_SendCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[31]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = MemManage_Handler &rArr;  MemManage_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[275]"></a>Menu_prase</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, user_menu.o(i.Menu_prase))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752 + Unknown Stack Size
<LI>Call Chain = Menu_prase &rArr; AUDIO_PLAYER_Process &rArr; AUDIO_PLAYER_Start &rArr; Lrc_Parse &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayRTCTime
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayButton
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorUSBOperation
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ShowWavFiles
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[276]"></a>MonitorUSBOperation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, user_task.o(i.MonitorUSBOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MonitorUSBOperation &rArr; LCD_DisplayUSB &rArr; BSP_LCD_DisplayStringAt
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayUSB
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
</UL>

<P><STRONG><a name="[277]"></a>MountFat32FileSystem</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, user_task.o(i.MountFat32FileSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MountFat32FileSystem &rArr; f_mount &rArr; find_volume &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[279]"></a>Mp3Play_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, user_mp3player.o(i.Mp3Play_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[27a]"></a>Mp3_GetID3V2</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, user_mp3player.o(i.Mp3_GetID3V2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[12c]"></a>Mp3_PlayStart</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, user_mp3player.o(i.Mp3_PlayStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = Mp3_PlayStart &rArr; Mp3_SubDecode &rArr; MP3Decode &rArr; xmp3_IMDCT &rArr; HybridTransform &rArr; imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[1aa]"></a>Mp3_SubDecode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, user_mp3player.o(i.Mp3_SubDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = Mp3_SubDecode &rArr; MP3Decode &rArr; xmp3_IMDCT &rArr; HybridTransform &rArr; imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3GetLastFrameInfo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindSyncWord
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Mono
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_PlayStart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
</UL>

<P><STRONG><a name="[2f]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = NMI_Handler &rArr;  NMI_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[27e]"></a>OTM8009A_IO_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32469i_discovery.o(i.OTM8009A_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OTM8009A_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[177]"></a>OTM8009A_Init</STRONG> (Thumb, 840 bytes, Stack size 16 bytes, otm8009a.o(i.OTM8009A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OTM8009A_Init &rArr; DSI_IO_WriteCmd &rArr; HAL_DSI_LongWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[36]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = PendSV_Handler &rArr;  PendSV_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[21c]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[27f]"></a>RTC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, user_init.o(i.RTC_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[223]"></a>SAI_BlockSynchroConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_sai_ex.o(i.SAI_BlockSynchroConfig))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[224]"></a>SAI_GetInputClock</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stm32f4xx_hal_sai_ex.o(i.SAI_GetInputClock))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[26d]"></a>SCSI_ProcessCmd</STRONG> (Thumb, 2018 bytes, Stack size 48 bytes, usbd_msc_scsi.o(i.SCSI_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCSI_ProcessCmd &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>

<P><STRONG><a name="[270]"></a>SCSI_SenseCode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_SenseCode))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[239]"></a>SDIO_DataConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[238]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[237]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[231]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[69]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_IRQHandler &rArr; BSP_SD_IRQHandler &rArr; HAL_SD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[235]"></a>SDIO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[236]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[23a]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[22f]"></a>SDIO_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckReadOperation
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[23c]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[284]"></a>SD_Error_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, user_task.o(i.SD_Error_Handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Error_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Error_Handler
</UL>

<P><STRONG><a name="[103]"></a>SD_initialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>SD_ioctl</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SD_ioctl &rArr; BSP_SD_GetCardInfo &rArr; HAL_SD_Get_CardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>SD_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>SD_status</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SD_status &rArr; BSP_SD_GetStatus &rArr; HAL_SD_GetStatus &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>SD_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; SD_IsCardProgramming &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9]"></a>STORAGE_GetCapacity</STRONG> (Thumb, 54 bytes, Stack size 104 bytes, usbd_storage.o(i.STORAGE_GetCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = STORAGE_GetCapacity &rArr; BSP_SD_GetCardInfo &rArr; HAL_SD_Get_CardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>STORAGE_GetMaxLun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage.o(i.STORAGE_GetMaxLun))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>STORAGE_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_storage.o(i.STORAGE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = STORAGE_Init &rArr; BSP_SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>STORAGE_IsReady</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_storage.o(i.STORAGE_IsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = STORAGE_IsReady &rArr; BSP_SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>STORAGE_IsWriteProtected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage.o(i.STORAGE_IsWriteProtected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>STORAGE_Read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, usbd_storage.o(i.STORAGE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = STORAGE_Read &rArr; BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>STORAGE_Write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, usbd_storage.o(i.STORAGE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = STORAGE_Write &rArr; BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = SVC_Handler &rArr;  SVC_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>Scan_MusicFile</STRONG> (Thumb, 330 bytes, Stack size 4256 bytes, user_task.o(i.Scan_MusicFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = Scan_MusicFile &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[288]"></a>Set_Time</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, user_task.o(i.Set_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set_Time &rArr; HAL_RTC_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>Show_MusicJPEG</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, user_jpeg.o(i.Show_MusicJPEG))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = Show_MusicJPEG &rArr; Get_MusicCoverJpeg &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[37]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Timercnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(.text)
</UL>
<P><STRONG><a name="[28c]"></a>System_Init</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, user_init.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = System_Init &rArr; BSP_QSPI_Init &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RegisterStorage
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SelectLayer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_LayerDefaultInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayOn
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayButton
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFat32FileSystem
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b]"></a>System_Timercnt</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.System_Timercnt))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[293]"></a>TS_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32469i_discovery.o(i.TS_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TS_IO_Init &rArr; I2C1_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[294]"></a>TS_IO_Read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32469i_discovery.o(i.TS_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DetectTouch
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
</UL>

<P><STRONG><a name="[295]"></a>TS_IO_ReadMultiple</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stm32469i_discovery.o(i.TS_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TS_IO_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetXY
</UL>

<P><STRONG><a name="[296]"></a>TS_IO_Write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stm32469i_discovery.o(i.TS_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TS_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Start
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_EnableIT
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
</UL>

<P><STRONG><a name="[2af]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[298]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[299]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[29a]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[29b]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[29c]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[29d]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2ab]"></a>USBD_GetString</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ProductStrDescriptor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ManufacturerStrDescriptor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_InterfaceStrDescriptor
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[28f]"></a>USBD_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[29f]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2a0]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[1d1]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[1d3]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[1cf]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[1d5]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[272]"></a>USBD_LL_FlushEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_FlushEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_FlushEP &rArr; HAL_PCD_EP_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[26f]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[29e]"></a>USBD_LL_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[2b0]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1f9]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[1fa]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[2a4]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[26a]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[203]"></a>USBD_LL_Reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[205]"></a>USBD_LL_Resume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[206]"></a>USBD_LL_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[204]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[2a5]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[209]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[26b]"></a>USBD_LL_StallEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2aa]"></a>USBD_LL_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[20d]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[269]"></a>USBD_LL_Transmit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[6]"></a>USBD_MSC_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_MSC_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>USBD_MSC_DataIn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_MSC_DataIn &rArr; MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>USBD_MSC_DataOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_MSC_DataOut &rArr; MSC_BOT_DataOut &rArr; SCSI_ProcessCmd &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBD_MSC_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_MSC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DeInit
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_MSC_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_MSC_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>USBD_MSC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>USBD_MSC_GetFSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>USBD_MSC_GetHSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>USBD_MSC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBD_MSC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_MSC_Init &rArr; MSC_BOT_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_MSC_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_MSC_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_MSC_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_MSC_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_MSC_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_MSC_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_MSC_ProductStrDescriptor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_MSC_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[291]"></a>USBD_MSC_RegisterStorage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_RegisterStorage))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[5]"></a>USBD_MSC_SerialStrDescriptor</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, usbd_desc.o(i.USBD_MSC_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_MSC_SerialStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>USBD_MSC_Setup</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_MSC_Setup &rArr; MSC_BOT_CplClrFeature &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[2a6]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[290]"></a>USBD_RegisterClass</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_RegisterClass &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2ae]"></a>USBD_SetClassConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[292]"></a>USBD_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2a7]"></a>USBD_StdDevReq</STRONG> (Thumb, 652 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2a9]"></a>USBD_StdEPReq</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2a8]"></a>USBD_StdItfReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1de]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[1f2]"></a>USB_ActivateSetup</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1fe]"></a>USB_CoreInit</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1d7]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[2b1]"></a>USB_Debug</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, user_task.o(i.USB_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Debug
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>USB_DevConnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[202]"></a>USB_DevDisconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[200]"></a>USB_DevInit</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1fd]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1e1]"></a>USB_EP0StartXfer</STRONG> (Thumb, 344 bytes, Stack size 4 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[1e4]"></a>USB_EP0_OutStart</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[1d9]"></a>USB_EPClearStall</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[1e3]"></a>USB_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[1e0]"></a>USB_EPStartXfer</STRONG> (Thumb, 628 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[20c]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1dc]"></a>USB_FlushRxFifo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
</UL>

<P><STRONG><a name="[1db]"></a>USB_FlushTxFifo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
</UL>

<P><STRONG><a name="[1f3]"></a>USB_GetDevSpeed</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e7]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2b2]"></a>USB_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, user_init.o(i.USB_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RegisterStorage
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1ec]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ed]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ea]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e8]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1f5]"></a>USB_ReadPacket</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>USB_SetCurrentMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[208]"></a>USB_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[1ee]"></a>USB_WritePacket</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsageFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f469xx.o(RESET)
</UL>
<P><STRONG><a name="[2b3]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32d]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[12e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayUSB
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicTimeRate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicInfo
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GetID3V2
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Play_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_filename
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Error_Handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFat32FileSystem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBK2Unicode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorUSBOperation
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ShowWavFiles
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[32e]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a9]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Play_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
</UL>

<P><STRONG><a name="[2b5]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32f]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[13e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPlayerStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicTimeRate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMusicInfo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Play_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_message
</UL>

<P><STRONG><a name="[330]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[331]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b7]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_jpeg.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
</UL>

<P><STRONG><a name="[332]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[333]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[334]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13b]"></a>clear_Lrc_buff</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, user_lrc.o(i.clear_Lrc_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clear_Lrc_buff &rArr; LCD_ClearZone &rArr; BSP_LCD_FillRect &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearZone
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[10]"></a>cs43l22_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs43l22.o(i.cs43l22_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>cs43l22_Init</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, cs43l22.o(i.cs43l22_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cs43l22_Init &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>cs43l22_Pause</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cs43l22_Pause &rArr; cs43l22_SetMute &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>cs43l22_Play</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cs43l22.o(i.cs43l22_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cs43l22_Play &rArr; cs43l22_SetMute &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>cs43l22_ReadID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs43l22.o(i.cs43l22_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cs43l22_ReadID &rArr; AUDIO_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>cs43l22_Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs43l22.o(i.cs43l22_Reset))
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>cs43l22_Resume</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cs43l22.o(i.cs43l22_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cs43l22_Resume &rArr; cs43l22_SetMute &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>cs43l22_SetFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs43l22.o(i.cs43l22_SetFrequency))
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>cs43l22_SetMute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_SetMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cs43l22_SetMute &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Stop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Resume
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Play
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>cs43l22_SetOutputMode</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_SetOutputMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cs43l22_SetOutputMode &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>cs43l22_SetVolume</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cs43l22_SetVolume &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>cs43l22_Stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cs43l22_Stop &rArr; cs43l22_SetMute &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[2dd]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2de]"></a>disk_ioctl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2ca]"></a>disk_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[2dc]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2ce]"></a>disk_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[13a]"></a>f_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = f_close &rArr; f_sync &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MusicJPEG
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[287]"></a>f_closedir</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
</UL>

<P><STRONG><a name="[25c]"></a>f_gets</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ff.o(i.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
</UL>

<P><STRONG><a name="[140]"></a>f_lseek</STRONG> (Thumb, 734 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GetID3V2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[278]"></a>f_mount</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = f_mount &rArr; find_volume &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFat32FileSystem
</UL>

<P><STRONG><a name="[13d]"></a>f_open</STRONG> (Thumb, 472 bytes, Stack size 4208 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MusicJPEG
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[285]"></a>f_opendir</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
</UL>

<P><STRONG><a name="[12d]"></a>f_read</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MusicCoverJpeg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_SubDecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GetID3V2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Mp3Parsing
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_input_buffer
</UL>

<P><STRONG><a name="[286]"></a>f_readdir</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
</UL>

<P><STRONG><a name="[2d4]"></a>f_sync</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = f_sync &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1b5]"></a>ff_convert</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBK2Unicode
</UL>

<P><STRONG><a name="[2cb]"></a>ff_wtoupper</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[9f]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[2ad]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[1b]"></a>ft6x06_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ft6x06_Init &rArr; TS_IO_Init &rArr; I2C1_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>ft6x06_ReadID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ft6x06_ReadID &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>ft6x06_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>ft6x06_TS_ClearIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>ft6x06_TS_DetectTouch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ft6x06_TS_DetectTouch &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>ft6x06_TS_DisableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>ft6x06_TS_EnableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ft6x06_TS_EnableIT &rArr; TS_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>ft6x06_TS_GetXY</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ft6x06.o(i.ft6x06_TS_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ft6x06_TS_GetXY &rArr; TS_IO_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>ft6x06_TS_ITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>ft6x06_TS_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ft6x06_TS_Start &rArr; TS_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[2bf]"></a>get_fat</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[2d8]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2e2]"></a>jcopy_sample_rows</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, jutils.o(i.jcopy_sample_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jcopy_sample_rows &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merged_2v_upsample
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grayscale_convert
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_upsample
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v2_upsample
</UL>

<P><STRONG><a name="[2bd]"></a>jdiv_round_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jutils.o(i.jdiv_round_up))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_markers
</UL>

<P><STRONG><a name="[2e3]"></a>jinit_1pass_quantizer</STRONG> (Thumb, 672 bytes, Stack size 112 bytes, jquant1.o(i.jinit_1pass_quantizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = jinit_1pass_quantizer &rArr; create_colorindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colorindex
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2e5]"></a>jinit_2pass_quantizer</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, jquant2.o(i.jinit_2pass_quantizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jinit_2pass_quantizer &rArr; init_error_limit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_error_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2f0]"></a>jinit_arith_decoder</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, jdarith.o(i.jinit_arith_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_arith_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2ee]"></a>jinit_color_deconverter</STRONG> (Thumb, 774 bytes, Stack size 32 bytes, jdcolor.o(i.jinit_color_deconverter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_color_deconverter
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2e7]"></a>jinit_d_coef_controller</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, jdcoefct.o(i.jinit_d_coef_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_d_coef_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2f2]"></a>jinit_d_main_controller</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, jdmainct.o(i.jinit_d_main_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jinit_d_main_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2e8]"></a>jinit_d_post_controller</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, jdpostct.o(i.jinit_d_post_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_d_post_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2f1]"></a>jinit_huff_decoder</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, jdhuff.o(i.jinit_huff_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_huff_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2f8]"></a>jinit_input_controller</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, jdinput.o(i.jinit_input_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinit_input_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>

<P><STRONG><a name="[2ea]"></a>jinit_inverse_dct</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, jddctmgr.o(i.jinit_inverse_dct))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_inverse_dct
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2f7]"></a>jinit_marker_reader</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, jdmarker.o(i.jinit_marker_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_marker_reader
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>

<P><STRONG><a name="[2eb]"></a>jinit_master_decompress</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, jdmaster.o(i.jinit_master_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = jinit_master_decompress &rArr; jinit_1pass_quantizer &rArr; create_colorindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_upsampler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_merged_upsampler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_post_controller
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_2pass_quantizer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_main_controller
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_huff_decoder
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_inverse_dct
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_color_deconverter
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_coef_controller
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_arith_decoder
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_decompress
</UL>

<P><STRONG><a name="[2f3]"></a>jinit_memory_mgr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, jmemmgr.o(i.jinit_memory_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = jinit_memory_mgr &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_term
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>

<P><STRONG><a name="[2ed]"></a>jinit_merged_upsampler</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, jdmerge.o(i.jinit_merged_upsampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_merged_upsampler
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2ef]"></a>jinit_upsampler</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, jdsample.o(i.jinit_upsampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jinit_upsampler
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2f6]"></a>jpeg_CreateDecompress</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, jdapimin.o(i.jpeg_CreateDecompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = jpeg_CreateDecompress &rArr; jinit_memory_mgr &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_marker_reader
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_input_controller
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[2fc]"></a>jpeg_abort</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_decompress
</UL>

<P><STRONG><a name="[303]"></a>jpeg_alloc_huff_table</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_alloc_huff_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_alloc_huff_table
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[305]"></a>jpeg_alloc_quant_table</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_alloc_quant_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_alloc_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[2ec]"></a>jpeg_calc_output_dimensions</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, jdmaster.o(i.jpeg_calc_output_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_calc_output_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_core_output_dimensions
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[2ff]"></a>jpeg_consume_input</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, jdapimin.o(i.jpeg_consume_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_consume_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
</UL>

<P><STRONG><a name="[2f9]"></a>jpeg_core_output_dimensions</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jdinput.o(i.jpeg_core_output_dimensions))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
</UL>

<P><STRONG><a name="[2d3]"></a>jpeg_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_decompress
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_exit
</UL>

<P><STRONG><a name="[2fa]"></a>jpeg_destroy_decompress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jdapimin.o(i.jpeg_destroy_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_destroy_decompress &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[2fb]"></a>jpeg_finish_decompress</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, jdapimin.o(i.jpeg_finish_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_finish_decompress &rArr; jpeg_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[2e0]"></a>jpeg_free_large</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_free_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_free_large &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>

<P><STRONG><a name="[2e1]"></a>jpeg_free_small</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_free_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_free_small &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>

<P><STRONG><a name="[2bb]"></a>jpeg_get_large</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_get_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_get_large &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>

<P><STRONG><a name="[2bc]"></a>jpeg_get_small</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_get_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>

<P><STRONG><a name="[ec]"></a>jpeg_idct_float</STRONG> (Thumb, 824 bytes, Stack size 272 bytes, jidctflt.o(i.jpeg_idct_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = jpeg_idct_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[eb]"></a>jpeg_idct_ifast</STRONG> (Thumb, 842 bytes, Stack size 368 bytes, jidctfst.o(i.jpeg_idct_ifast))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jpeg_idct_ifast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[ea]"></a>jpeg_idct_islow</STRONG> (Thumb, 964 bytes, Stack size 376 bytes, jidctint.o(i.jpeg_idct_islow))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jpeg_idct_islow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[307]"></a>jpeg_mem_available</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_available))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>

<P><STRONG><a name="[2f4]"></a>jpeg_mem_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
</UL>

<P><STRONG><a name="[30a]"></a>jpeg_mem_src</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jdatasrc.o(i.jpeg_mem_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_mem_src
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[2f5]"></a>jpeg_mem_term</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_term))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
</UL>

<P><STRONG><a name="[308]"></a>jpeg_open_backing_store</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_open_backing_store))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>

<P><STRONG><a name="[2fe]"></a>jpeg_read_header</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, jdapimin.o(i.jpeg_read_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_read_header &rArr; jpeg_consume_input
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_abort
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_consume_input
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[30c]"></a>jpeg_read_scanlines</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, jdapistd.o(i.jpeg_read_scanlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_read_scanlines
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[dc]"></a>jpeg_resync_to_restart</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, jdmarker.o(i.jpeg_resync_to_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_resync_to_restart
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
<LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[300]"></a>jpeg_start_decompress</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, jdapistd.o(i.jpeg_start_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = jpeg_start_decompress &rArr; jinit_master_decompress &rArr; jinit_1pass_quantizer &rArr; create_colorindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[309]"></a>jpeg_std_error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, jerror.o(i.jpeg_std_error))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[30b]"></a>jpeg_stdio_src</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jdatasrc.o(i.jpeg_stdio_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_stdio_src
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_jepg
</UL>

<P><STRONG><a name="[2e9]"></a>jround_up</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jutils.o(i.jround_up))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_upsampler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_post_controller
</UL>

<P><STRONG><a name="[94]"></a>main</STRONG> (Thumb, 396 bytes, Stack size 136 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888 + Unknown Stack Size
<LI>Call Chain = main &rArr; Menu_prase &rArr; AUDIO_PLAYER_Process &rArr; AUDIO_PLAYER_Start &rArr; Lrc_Parse &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Debug
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_MusicFile
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_prase
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[259]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lrc_Parse
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[2c0]"></a>put_fat</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[132]"></a>show_filename</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, user_task.o(i.show_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = show_filename &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[289]"></a>show_jepg</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, user_jpeg.o(i.show_jepg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = show_jepg &rArr; jpeg_start_decompress &rArr; jinit_master_decompress &rArr; jinit_1pass_quantizer &rArr; create_colorindex
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_stdio_src
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_std_error
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_decompress
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_scanlines
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_src
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_decompress
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_decompress
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MusicJPEG
</UL>

<P><STRONG><a name="[267]"></a>xmp3_AllocateBuffers</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, buffers.o(i.xmp3_AllocateBuffers))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
</UL>

<P><STRONG><a name="[316]"></a>xmp3_CalcBitsUsed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bitstream.o(i.xmp3_CalcBitsUsed))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
</UL>

<P><STRONG><a name="[260]"></a>xmp3_CheckPadBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bitstream.o(i.xmp3_CheckPadBit))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[263]"></a>xmp3_DecodeHuffman</STRONG> (Thumb, 1982 bytes, Stack size 168 bytes, huffman.o(i.xmp3_DecodeHuffman))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xmp3_DecodeHuffman
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[30d]"></a>xmp3_DequantChannel</STRONG> (Thumb, 1396 bytes, Stack size 176 bytes, dqchan.o(i.xmp3_DequantChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = xmp3_DequantChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[264]"></a>xmp3_Dequantize</STRONG> (Thumb, 616 bytes, Stack size 80 bytes, dequant.o(i.xmp3_Dequantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = xmp3_Dequantize &rArr; xmp3_IntensityProcMPEG2
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MidSideProc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG2
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG1
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DequantChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[311]"></a>xmp3_FDCT32</STRONG> (Thumb, 1860 bytes, Stack size 120 bytes, dct32.o(i.xmp3_FDCT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = xmp3_FDCT32
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Subband
</UL>

<P><STRONG><a name="[315]"></a>xmp3_GetBits</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, bitstream.o(i.xmp3_GetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xmp3_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackSideInfo
</UL>

<P><STRONG><a name="[265]"></a>xmp3_IMDCT</STRONG> (Thumb, 898 bytes, Stack size 136 bytes, imdct.o(i.xmp3_IMDCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = xmp3_IMDCT &rArr; HybridTransform &rArr; imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[310]"></a>xmp3_IntensityProcMPEG1</STRONG> (Thumb, 616 bytes, Stack size 128 bytes, stproc.o(i.xmp3_IntensityProcMPEG1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = xmp3_IntensityProcMPEG1
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[30f]"></a>xmp3_IntensityProcMPEG2</STRONG> (Thumb, 614 bytes, Stack size 200 bytes, stproc.o(i.xmp3_IntensityProcMPEG2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = xmp3_IntensityProcMPEG2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[30e]"></a>xmp3_MidSideProc</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stproc.o(i.xmp3_MidSideProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = xmp3_MidSideProc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[314]"></a>xmp3_SetBitstreamPointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bitstream.o(i.xmp3_SetBitstreamPointer))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
</UL>

<P><STRONG><a name="[266]"></a>xmp3_Subband</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, subband.o(i.xmp3_Subband))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = xmp3_Subband &rArr; xmp3_FDCT32
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_PolyphaseStereo
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_PolyphaseMono
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FDCT32
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[25e]"></a>xmp3_UnpackFrameHeader</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, bitstream.o(i.xmp3_UnpackFrameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xmp3_UnpackFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[262]"></a>xmp3_UnpackScaleFactors</STRONG> (Thumb, 1378 bytes, Stack size 168 bytes, scalfact.o(i.xmp3_UnpackScaleFactors))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xmp3_UnpackScaleFactors &rArr; xmp3_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_SetBitstreamPointer
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_GetBits
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_CalcBitsUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[25f]"></a>xmp3_UnpackSideInfo</STRONG> (Thumb, 576 bytes, Stack size 64 bytes, bitstream.o(i.xmp3_UnpackSideInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xmp3_UnpackSideInfo &rArr; xmp3_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ba]"></a>DMA2D_SetConfig</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.DMA2D_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
</UL>

<P><STRONG><a name="[1c4]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1c5]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1c3]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[249]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1c6]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1cc]"></a>LTDC_SetConfig</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[212]"></a>QSPI_Config</STRONG> (Thumb, 582 bytes, Stack size 12 bytes, stm32f4xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[210]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f4xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[99]"></a>SAI_DMAError</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_sai.o(i.SAI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_DMAError &rArr; HAL_SAI_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[98]"></a>SAI_DMATxCplt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal_sai.o(i.SAI_DMATxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_DMATxCplt &rArr; HAL_SAI_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[97]"></a>SAI_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_sai.o(i.SAI_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_DMATxHalfCplt &rArr; HAL_SAI_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[21e]"></a>SAI_Disable</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAError
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>

<P><STRONG><a name="[226]"></a>SAI_InterruptFlag</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.SAI_InterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxCplt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
</UL>

<P><STRONG><a name="[230]"></a>SD_CmdResp1Error</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckReadOperation
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[9a]"></a>SD_DMA_RxCplt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMA_RxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_DMA_RxCplt &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DMA_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[9b]"></a>SD_DMA_RxError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMA_RxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_DMA_RxError
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DMA_RxErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[9c]"></a>SD_DMA_TxCplt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMA_TxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_DMA_TxCplt &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DMA_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[9d]"></a>SD_DMA_TxError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMA_TxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_DMA_TxError
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DMA_TxErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[23b]"></a>SD_FindSCR</STRONG> (Thumb, 300 bytes, Stack size 96 bytes, stm32f4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
</UL>

<P><STRONG><a name="[23d]"></a>SD_IsCardProgramming</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, stm32f4xx_hal_sd.o(i.SD_IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SD_IsCardProgramming &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[240]"></a>UART_SetConfig</STRONG> (Thumb, 822 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[242]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[247]"></a>I2C1_Init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32469i_discovery.o(i.I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C1_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>

<P><STRONG><a name="[120]"></a>I2C2_Init</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32469i_discovery.o(i.I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C2_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
</UL>

<P><STRONG><a name="[16b]"></a>FillTriangle</STRONG> (Thumb, 212 bytes, Stack size 60 bytes, stm32469i_discovery_lcd.o(i.FillTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FillTriangle &rArr; BSP_LCD_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillPolygon
</UL>

<P><STRONG><a name="[182]"></a>QSPI_AutoPollingMemReady</STRONG> (Thumb, 74 bytes, Stack size 88 bytes, stm32469i_discovery_qspi.o(i.QSPI_AutoPollingMemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[184]"></a>QSPI_WriteEnable</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, stm32469i_discovery_qspi.o(i.QSPI_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = QSPI_WriteEnable &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[11d]"></a>AUDIO_AcquireTouchButtons</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, user_musicplayer.o(i.AUDIO_AcquireTouchButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AUDIO_AcquireTouchButtons &rArr; BSP_TS_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[144]"></a>AUDIO_PlaybackDisplayButtons</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, user_musicplayer.o(i.AUDIO_PlaybackDisplayButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AUDIO_PlaybackDisplayButtons &rArr; LCD_DisplayStringAt &rArr; BSP_QSPI_Read &rArr; HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillPolygon
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[9e]"></a>Jpeg_CallbackFunction</STRONG> (Thumb, 86 bytes, Stack size 2584 bytes, user_jpeg.o(i.Jpeg_CallbackFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584<LI>Call Chain = Jpeg_CallbackFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_jpeg.o(i.Show_MusicJPEG)
</UL>
<P><STRONG><a name="[2be]"></a>create_chain</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[2c7]"></a>dir_find</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2cc]"></a>dir_next</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[2cf]"></a>dir_read</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[2d0]"></a>dir_register</STRONG> (Thumb, 848 bytes, Stack size 64 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2c8]"></a>dir_sdi</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[2d6]"></a>find_volume</STRONG> (Thumb, 1150 bytes, Stack size 56 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = find_volume &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[2d7]"></a>follow_path</STRONG> (Thumb, 698 bytes, Stack size 48 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2da]"></a>get_fileinfo</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[2d1]"></a>mem_cpy</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[2cd]"></a>mem_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2d2]"></a>move_window</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2d9]"></a>remove_chain</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2db]"></a>sync_fs</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2c9]"></a>sync_window</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2d5]"></a>validate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1b2]"></a>FreqInvertRescale</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, imdct.o(i.FreqInvertRescale))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FreqInvertRescale
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[243]"></a>HybridTransform</STRONG> (Thumb, 2064 bytes, Stack size 368 bytes, imdct.o(i.HybridTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = HybridTransform &rArr; imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct12
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IMDCT
</UL>

<P><STRONG><a name="[245]"></a>WinPrevious</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, imdct.o(i.WinPrevious))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = WinPrevious
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[246]"></a>imdct12</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, imdct.o(i.imdct12))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[2c3]"></a>arith_decode</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, jdarith.o(i.arith_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arith_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[e9]"></a>decode_mcu</STRONG> (Thumb, 582 bytes, Stack size 88 bytes, jdarith.o(i.decode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = decode_mcu &rArr; arith_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[e7]"></a>decode_mcu_AC_first</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, jdarith.o(i.decode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = decode_mcu_AC_first &rArr; arith_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[e6]"></a>decode_mcu_AC_refine</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, jdarith.o(i.decode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = decode_mcu_AC_refine &rArr; arith_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[e8]"></a>decode_mcu_DC_first</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, jdarith.o(i.decode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = decode_mcu_DC_first &rArr; arith_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[e5]"></a>decode_mcu_DC_refine</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, jdarith.o(i.decode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = decode_mcu_DC_refine &rArr; arith_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[2c2]"></a>process_restart</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, jdarith.o(i.process_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_restart
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[a7]"></a>start_pass</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, jdarith.o(i.start_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_pass
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.jinit_arith_decoder)
</UL>
<P><STRONG><a name="[e4]"></a>fill_input_buffer</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, jdatasrc.o(i.fill_input_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fill_input_buffer &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[da]"></a>fill_mem_input_buffer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jdatasrc.o(i.fill_mem_input_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fill_mem_input_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
</UL>
<P><STRONG><a name="[d9]"></a>init_mem_source</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdatasrc.o(i.init_mem_source))
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
</UL>
<P><STRONG><a name="[e3]"></a>init_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jdatasrc.o(i.init_source))
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[db]"></a>skip_input_data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jdatasrc.o(i.skip_input_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skip_input_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
<LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[dd]"></a>term_source</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdatasrc.o(i.term_source))
<BR>[Address Reference Count : 2]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
<LI> jdatasrc.o(i.jpeg_stdio_src)
</UL>
<P><STRONG><a name="[b3]"></a>decompress_onepass</STRONG> (Thumb, 470 bytes, Stack size 112 bytes, jdcoefct.o(i.decompress_onepass))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = decompress_onepass
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[b2]"></a>dummy_consume_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jdcoefct.o(i.dummy_consume_data))
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[b0]"></a>start_input_pass</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, jdcoefct.o(i.start_input_pass))
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[b1]"></a>start_output_pass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jdcoefct.o(i.start_output_pass))
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[ac]"></a>gray_rgb_convert</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, jdcolor.o(i.gray_rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gray_rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[aa]"></a>grayscale_convert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, jdcolor.o(i.grayscale_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = grayscale_convert &rArr; jcopy_sample_rows &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[a9]"></a>null_convert</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, jdcolor.o(i.null_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = null_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[ad]"></a>rgb_convert</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, jdcolor.o(i.rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[ab]"></a>rgb_gray_convert</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, jdcolor.o(i.rgb_gray_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rgb_gray_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[a8]"></a>start_pass_dcolor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdcolor.o(i.start_pass_dcolor))
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[ae]"></a>ycc_rgb_convert</STRONG> (Thumb, 188 bytes, Stack size 60 bytes, jdcolor.o(i.ycc_rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ycc_rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[af]"></a>ycck_cmyk_convert</STRONG> (Thumb, 210 bytes, Stack size 60 bytes, jdcolor.o(i.ycck_cmyk_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ycck_cmyk_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[ba]"></a>start_pass</STRONG> (Thumb, 734 bytes, Stack size 152 bytes, jddctmgr.o(i.start_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = start_pass &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.jinit_inverse_dct)
</UL>
<P><STRONG><a name="[ff]"></a>decode_mcu</STRONG> (Thumb, 760 bytes, Stack size 128 bytes, jdhuff.o(i.decode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = decode_mcu &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[fc]"></a>decode_mcu_AC_first</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, jdhuff.o(i.decode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = decode_mcu_AC_first &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[fb]"></a>decode_mcu_AC_refine</STRONG> (Thumb, 742 bytes, Stack size 384 bytes, jdhuff.o(i.decode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = decode_mcu_AC_refine &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[fd]"></a>decode_mcu_DC_first</STRONG> (Thumb, 360 bytes, Stack size 120 bytes, jdhuff.o(i.decode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = decode_mcu_DC_first &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[fa]"></a>decode_mcu_DC_refine</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, jdhuff.o(i.decode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = decode_mcu_DC_refine &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[fe]"></a>decode_mcu_sub</STRONG> (Thumb, 764 bytes, Stack size 136 bytes, jdhuff.o(i.decode_mcu_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = decode_mcu_sub &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[2c5]"></a>jpeg_fill_bit_buffer</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, jdhuff.o(i.jpeg_fill_bit_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_fill_bit_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[2c6]"></a>jpeg_huff_decode</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, jdhuff.o(i.jpeg_huff_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[2fd]"></a>jpeg_make_d_derived_tbl</STRONG> (Thumb, 610 bytes, Stack size 1344 bytes, jdhuff.o(i.jpeg_make_d_derived_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = jpeg_make_d_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_huff_decoder
</UL>

<P><STRONG><a name="[2c4]"></a>process_restart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, jdhuff.o(i.process_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[b6]"></a>start_pass_huff_decoder</STRONG> (Thumb, 1074 bytes, Stack size 40 bytes, jdhuff.o(i.start_pass_huff_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = start_pass_huff_decoder &rArr; jpeg_make_d_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_d_derived_tbl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.jinit_huff_decoder)
</UL>
<P><STRONG><a name="[a1]"></a>consume_markers</STRONG> (Thumb, 1040 bytes, Stack size 40 bytes, jdinput.o(i.consume_markers))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = consume_markers &rArr; start_input_pass &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
</UL>
<BR>[Address Reference Count : 3]<UL><LI> jdinput.o(i.finish_input_pass)
<LI> jdinput.o(i.jinit_input_controller)
<LI> jdinput.o(i.reset_input_controller)
</UL>
<P><STRONG><a name="[b9]"></a>finish_input_pass</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jdinput.o(i.finish_input_pass))
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[b7]"></a>reset_input_controller</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jdinput.o(i.reset_input_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_input_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[b8]"></a>start_input_pass</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, jdinput.o(i.start_input_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_input_pass &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_markers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[101]"></a>process_data_context_main</STRONG> (Thumb, 592 bytes, Stack size 72 bytes, jdmainct.o(i.process_data_context_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_data_context_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[100]"></a>process_data_crank_post</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, jdmainct.o(i.process_data_crank_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_data_crank_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[102]"></a>process_data_simple_main</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, jdmainct.o(i.process_data_simple_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = process_data_simple_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[b4]"></a>start_pass_main</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, jdmainct.o(i.start_pass_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = start_pass_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.jinit_d_main_controller)
</UL>
<P><STRONG><a name="[bf]"></a>get_interesting_appn</STRONG> (Thumb, 882 bytes, Stack size 56 bytes, jdmarker.o(i.get_interesting_appn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_interesting_appn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[302]"></a>get_sof</STRONG> (Thumb, 636 bytes, Stack size 32 bytes, jdmarker.o(i.get_sof))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_sof
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[306]"></a>next_marker</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, jdmarker.o(i.next_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = next_marker
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_restart_marker
</UL>

<P><STRONG><a name="[bc]"></a>read_markers</STRONG> (Thumb, 3514 bytes, Stack size 352 bytes, jdmarker.o(i.read_markers))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = read_markers &rArr; get_sof
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_quant_table
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_huff_table
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sof
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[bd]"></a>read_restart_marker</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, jdmarker.o(i.read_restart_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_restart_marker &rArr; next_marker
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[bb]"></a>reset_marker_reader</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, jdmarker.o(i.reset_marker_reader))
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[be]"></a>skip_variable</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, jdmarker.o(i.skip_variable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skip_variable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[c1]"></a>finish_output_pass</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jdmaster.o(i.finish_output_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_output_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmaster.o(i.jinit_master_decompress)
</UL>
<P><STRONG><a name="[c0]"></a>prepare_for_output_pass</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, jdmaster.o(i.prepare_for_output_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepare_for_output_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmaster.o(i.jinit_master_decompress)
</UL>
<P><STRONG><a name="[cf]"></a>h2v1_merged_upsample</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, jdmerge.o(i.h2v1_merged_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = h2v1_merged_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[d1]"></a>h2v2_merged_upsample</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, jdmerge.o(i.h2v2_merged_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = h2v2_merged_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[ce]"></a>merged_1v_upsample</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, jdmerge.o(i.merged_1v_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = merged_1v_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[d0]"></a>merged_2v_upsample</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, jdmerge.o(i.merged_2v_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = merged_2v_upsample &rArr; jcopy_sample_rows &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[cd]"></a>start_pass_merged_upsample</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, jdmerge.o(i.start_pass_merged_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[f7]"></a>post_process_1pass</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, jdpostct.o(i.post_process_1pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = post_process_1pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[f9]"></a>post_process_2pass</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, jdpostct.o(i.post_process_2pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = post_process_2pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[f8]"></a>post_process_prepass</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, jdpostct.o(i.post_process_prepass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = post_process_prepass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[b5]"></a>start_pass_dpost</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, jdpostct.o(i.start_pass_dpost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_pass_dpost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.jinit_d_post_controller)
</UL>
<P><STRONG><a name="[d5]"></a>fullsize_upsample</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jdsample.o(i.fullsize_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[d6]"></a>h2v1_upsample</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, jdsample.o(i.h2v1_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = h2v1_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[d7]"></a>h2v2_upsample</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, jdsample.o(i.h2v2_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = h2v2_upsample &rArr; jcopy_sample_rows &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[d8]"></a>int_upsample</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, jdsample.o(i.int_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = int_upsample &rArr; jcopy_sample_rows &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[d4]"></a>noop_upsample</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jdsample.o(i.noop_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[d3]"></a>sep_upsample</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, jdsample.o(i.sep_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sep_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[d2]"></a>start_pass_upsample</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jdsample.o(i.start_pass_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[df]"></a>emit_message</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, jerror.o(i.emit_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = emit_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[de]"></a>error_exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jerror.o(i.error_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = error_exit &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[e1]"></a>format_message</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, jerror.o(i.format_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = format_message &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[e0]"></a>output_message</STRONG> (Thumb, 16 bytes, Stack size 208 bytes, jerror.o(i.output_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = output_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[e2]"></a>reset_error_mgr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jerror.o(i.reset_error_mgr))
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[ca]"></a>access_virt_barray</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, jmemmgr.o(i.access_virt_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = access_virt_barray
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[c9]"></a>access_virt_sarray</STRONG> (Thumb, 518 bytes, Stack size 48 bytes, jmemmgr.o(i.access_virt_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = access_virt_sarray
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[c5]"></a>alloc_barray</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, jmemmgr.o(i.alloc_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = alloc_barray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[c3]"></a>alloc_large</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = alloc_large &rArr; jpeg_get_large &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[c4]"></a>alloc_sarray</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, jmemmgr.o(i.alloc_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = alloc_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[c2]"></a>alloc_small</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, jmemmgr.o(i.alloc_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_virt_sarray
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_virt_barray
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[cb]"></a>free_pool</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, jmemmgr.o(i.free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = free_pool &rArr; jpeg_free_small &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[c8]"></a>realize_virt_arrays</STRONG> (Thumb, 914 bytes, Stack size 64 bytes, jmemmgr.o(i.realize_virt_arrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = realize_virt_arrays &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_open_backing_store
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_available
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[c7]"></a>request_virt_barray</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, jmemmgr.o(i.request_virt_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = request_virt_barray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[c6]"></a>request_virt_sarray</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, jmemmgr.o(i.request_virt_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = request_virt_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[cc]"></a>self_destruct</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, jmemmgr.o(i.self_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = self_destruct &rArr; jpeg_free_small &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_term
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[ed]"></a>color_quantize</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, jquant1.o(i.color_quantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = color_quantize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[ee]"></a>color_quantize3</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, jquant1.o(i.color_quantize3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = color_quantize3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[2e4]"></a>create_colorindex</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, jquant1.o(i.create_colorindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_colorindex
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
</UL>

<P><STRONG><a name="[a3]"></a>finish_pass_1_quant</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jquant1.o(i.finish_pass_1_quant))
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[a4]"></a>new_color_map_1_quant</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jquant1.o(i.new_color_map_1_quant))
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[f0]"></a>quantize3_ord_dither</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, jquant1.o(i.quantize3_ord_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = quantize3_ord_dither
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[f1]"></a>quantize_fs_dither</STRONG> (Thumb, 330 bytes, Stack size 144 bytes, jquant1.o(i.quantize_fs_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = quantize_fs_dither
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[ef]"></a>quantize_ord_dither</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, jquant1.o(i.quantize_ord_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = quantize_ord_dither
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[a2]"></a>start_pass_1_quant</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, jquant1.o(i.start_pass_1_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = start_pass_1_quant &rArr; create_colorindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colorindex
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[301]"></a>fill_inverse_cmap</STRONG> (Thumb, 834 bytes, Stack size 1552 bytes, jquant2.o(i.fill_inverse_cmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = fill_inverse_cmap
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass2_no_dither
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass2_fs_dither
</UL>

<P><STRONG><a name="[f3]"></a>finish_pass1</STRONG> (Thumb, 648 bytes, Stack size 96 bytes, jquant2.o(i.finish_pass1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = finish_pass1 &rArr; update_box
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[f6]"></a>finish_pass2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jquant2.o(i.finish_pass2))
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[2e6]"></a>init_error_limit</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, jquant2.o(i.init_error_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_error_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_2pass_quantizer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_2_quant
</UL>

<P><STRONG><a name="[a6]"></a>new_color_map_2_quant</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jquant2.o(i.new_color_map_2_quant))
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.jinit_2pass_quantizer)
</UL>
<P><STRONG><a name="[f5]"></a>pass2_fs_dither</STRONG> (Thumb, 494 bytes, Stack size 176 bytes, jquant2.o(i.pass2_fs_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = pass2_fs_dither &rArr; fill_inverse_cmap
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[f4]"></a>pass2_no_dither</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, jquant2.o(i.pass2_no_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = pass2_no_dither &rArr; fill_inverse_cmap
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[f2]"></a>prescan_quantize</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, jquant2.o(i.prescan_quantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prescan_quantize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[a5]"></a>start_pass_2_quant</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, jquant2.o(i.start_pass_2_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = start_pass_2_quant &rArr; init_error_limit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_error_limit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.jinit_2pass_quantizer)
</UL>
<P><STRONG><a name="[2df]"></a>update_box</STRONG> (Thumb, 650 bytes, Stack size 48 bytes, jquant2.o(i.update_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_box
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass1
</UL>

<P><STRONG><a name="[2b6]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b4]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[2b9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a0]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
